@model DAL.Product
@section styles{
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous"></script>
    <style>
        .btn {
            background-color: #009970;
            color: #fff;
            font-size: 15px
        }

            .btn:hover {
                opacity: .7;
            }

        input,
        textarea {
            border: 1px solid #eeeeee;
            box-sizing: border-box;
            margin: 0;
            outline: none;
            padding: 10px;
        }

            input[type="button"] {
                -webkit-appearance: button;
                cursor: pointer;
            }

            input::-webkit-outer-spin-button,
            input::-webkit-inner-spin-button {
                -webkit-appearance: none;
            }

        .input-group {
            clear: both;
            margin: 15px 0;
            position: relative;
        }

            .input-group input[type='button'] {
                min-width: 38px;
                width: auto;
                transition: all 300ms ease;
            }

            .input-group .button-minus,
            .input-group .button-plus {
                font-weight: bold;
                height: 38px;
                padding: 0;
                width: 38px;
                position: relative;
            }

            .input-group .quantity-field {
                position: relative;
                height: 38px;
                left: -6px;
                text-align: center;
                width: 200px;
                display: inline-block;
                font-size: 13px;
                margin: 0 0 5px;
                resize: vertical;
            }

        .button-plus {
            left: -13px;
        }

        input[type="number"] {
            -moz-appearance: textfield;
            -webkit-appearance: none;
        }
        .hidden{
            display:none;
        }
        .hide{
            display:none;
        }
    </style>
}
<div style="background-color:#009970;margin-top:-20px">
    <hr />
    <h4 style="color: #fff; text-align:center;font-size:30px">Purchase</h4>
    <hr />
</div>
<p style="margin-left:90px ;font-weight:bold">
    @Html.ActionLink("Back to Home", "Index", "Home")
</p>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-5">
            <h1>@Html.DisplayFor(model => model.ProductName)</h1>
            <p style="margin-left:10px">
                @Html.DisplayNameFor(model => model.Description) :
                @Html.DisplayFor(model => model.Description)
                <br />
                @Html.DisplayNameFor(model => model.brand.BrandName) :
                @Html.DisplayFor(model => model.brand.BrandName)
                <br />
                @Html.DisplayNameFor(model => model.price) :
                @Html.DisplayFor(model => model.price)
                <br />
                @Html.DisplayNameFor(model => model.Color) :
                @Html.DisplayFor(model => model.Color)
                <br />
                @Html.DisplayNameFor(model => model.Size) :
                @Html.DisplayFor(model => model.Size)
                <br />
                @Html.DisplayNameFor(model => model.Quantity) :
                <span id="Quantity">
                    @Html.DisplayFor(model => model.Quantity)
                </span>
            </p>
        </div>
        <div class="col-3">
            <img src="~/Content/img/portfolio/@Model.Image" width="200" height="200" />
        </div>
    </div>
    <div class="row justify-content-center" style="margin-left:390px">
        <div class="input-group col-3">
            <input type="button" value="-" class="btn button-minus" data-field="quantity">
            <input type="number" step="1" max="" value="1" name="quantity" class="quantity-field">
            <input type="button" value="+" class="btn button-plus" data-field="quantity">
        </div>
    </div><br />
    <div class="row justify-content-center">
        <div class="col-3">
            <button style="background-color:#009970;color:#fff" id="buy" value="Buy" class="btn">Order</button>
        </div>
    </div><br />
    <div class="row justify-content-center hidden">
        <div class="col-5">
            <p style="margin-left:10px">
                @Html.DisplayNameFor(model => model.price) :
                @Html.DisplayFor(model => model.price)
                <br />
                Count :
                <span id="Count"></span>
                <br />
                Total Price :
                <span id="total"></span>
            </p>
        </div>
    </div>
    <div class="row justify-content-center hide">
        <div class="col-3">
            <button style="background-color:#009970;color:#fff" id="confirm" value="confirm" class="btn">Confirm</button>
        </div>
    </div><br />

</div>
<br />
<br />
<input type="hidden" id="id" value="@Model.ID" />

@section scripts{
    <script src="~/Scripts/jquery.signalR-2.4.1.js"></script>
    <script src="~/signalr/js"></script>
    <script>
        function incrementValue(e) {
            e.preventDefault();
            var fieldName = $(e.target).data('field');
            var parent = $(e.target).closest('div');
            var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

            if (!isNaN(currentVal)) {
                parent.find('input[name=' + fieldName + ']').val(currentVal + 1);
            } else {
                parent.find('input[name=' + fieldName + ']').val(0);
            }
        }

        function decrementValue(e) {
            e.preventDefault();
            var fieldName = $(e.target).data('field');
            var parent = $(e.target).closest('div');
            var currentVal = parseInt(parent.find('input[name=' + fieldName + ']').val(), 10);

            if (!isNaN(currentVal) && currentVal > 0) {
                parent.find('input[name=' + fieldName + ']').val(currentVal - 1);
            } else {
                parent.find('input[name=' + fieldName + ']').val(0);
            }
        }

        $('.input-group').on('click', '.button-plus', function (e) {
            incrementValue(e);
        });

        $('.input-group').on('click', '.button-minus', function (e) {
            decrementValue(e);
        });
        var proxy = $.connection.MyHub;
        $.connection.hub.start().done(
            function () {
                console.log("Connected");
                $("#buy").click(function () {
                    $(".hidden").css({
                        "display": "block",
                        "margin-left": "280px"
                    });
                    $(".hide").css({
                        "display": "block",
                        "margin-left": "475px"
                    });
                     var value = $(".quantity-field").val();
                        $("#Count").html(value);
                        $("#total").html(value *@Model.price)
                    var quantity = parseInt($("#Quantity").html());
                    var id = $("#id").val();
                    proxy.server.ChangeQuantity(quantity, id,value);
                });
            });
        proxy.client.DecreaseQuantity = function (quantity, proid) {
            var id = $("#id").val();
            if (id == proid) {
                $("#Quantity").html(quantity);
            }
        }

    </script>   
}
